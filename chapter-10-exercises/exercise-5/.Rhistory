has_more_zs <- function(str1, str2) {
count1 <- str_count(tolower(str1), "z")
count2 <- str_count(tolower(str2), "z")
if (count1 == 0 && count2 == 0) {
return("Neither string contains the letter z.")
} else if (count1 == count2) {
return("The strings have the same number of Zs.")
} else {
if (count1 > count2) {
return(str1)
} else {
return(str2)
}
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("zzZzz", "azazazZzzzZzz")
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(input) {
input <- str_remove_all(input, "[0-9]")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
non_number <- remove_digits(c("INFO 201", "CSE 142"))
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Your Name", "Star Wars", "Iron Man", "Man In Black", "Lion King", "Salyut 7")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, " is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
without_four <- movies[-1:-4]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- c(1:100) * 4
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
filter <- multiples_of_4 %% 8 == 0
multiples_of_8 <- multiples_of_4[filter]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
lower_numbers <- numbers[numbers < numbers_mean]
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
higher_numbers <- numbers[numbers > numbers_mean]
# Lists ------------------------------------------------------------------------
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list(
"length" <- numbers_len,
"mean" <- numbers_mean,
"median" <- numbers_median
)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- function(input) {
summary_info <- list(
"length" <- length(input),
"mean" <- mean(input),
"median" <- median(input)
)
summary_info
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(c(1:100))
lint("assignment.R")
lint("assignment.R")
# A2 foundational skills
# Set up and Defining variables ------------------------------------------------
# Load the the `stringr` package
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
library(stringr)
# Create a numeric variable `my_age` that is equal to your age
my_age <- 20
# Create a variable `my_name` that is equal to your first name
my_name <- "Zehua"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 60 * 365
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
part1 <- paste("Hello, my name is", name, sep = " ")
part2 <- paste(", and I\'m", age, "years old.", sep = " ")
result <- paste(part1, part2, sep = "")
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- str_replace(my_intro, "Hello, my name is", "Hey, I\'m")
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all capital letters.
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all lower-case letters.
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized_intro`, which is your `my_intro` variable,
# but with each word capitalized. hint: use the stringr function `str_to_title`
capitalized_intro <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(num) {
num * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(num) {
num * num * num
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- function(num) {
num * 2.54
}
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 70.6
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <- inches_to_cm(inches_tall)
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables, and return the argument which has more occurances of the letter "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(str1, str2) {
count1 <- str_count(tolower(str1), "z")
count2 <- str_count(tolower(str2), "z")
if (count1 == 0 && count2 == 0) {
return("Neither string contains the letter z.")
} else if (count1 == count2) {
return("The strings have the same number of Zs.")
} else {
if (count1 > count2) {
return(str1)
} else {
return(str2)
}
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("zzZzz", "azazazZzzzZzz")
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(input) {
input <- str_remove_all(input, "[0-9]")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
non_number <- remove_digits(c("INFO 201", "CSE 142"))
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Your Name",
"Star Wars",
"Iron Man",
"Man In Black",
"Lion King",
"Salyut 7")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, " is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
without_four <- movies[-1:-4]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- c(1:100) * 4
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
filter <- multiples_of_4 %% 8 == 0
multiples_of_8 <- multiples_of_4[filter]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
lower_numbers <- numbers[numbers < numbers_mean]
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
higher_numbers <- numbers[numbers > numbers_mean]
# Lists ------------------------------------------------------------------------
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list(
"length" <- numbers_len,
"mean" <- numbers_mean,
"median" <- numbers_median
)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- function(input) {
summary_info <- list(
"length" <- length(input),
"mean" <- mean(input),
"median" <- median(input)
)
summary_info
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(c(1:100))
lint("assignment.R")
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
part1 <- paste("Hello, my name is", name, sep = " ")
part2 <- paste(", and I\'m", age, "years old.", sep = " ")
paste(part1, part2, sep = "")
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
style_file("assignment.R")
style_file("assignment.R")
lint("assignment.R")
package.install(carData)
install.packages(carData)
install.packages("carData")
library(carData)
Florida
nrow(Florida[GORE > BUSH,])
Florida[Florida$GORE > Florida$BUSH,]
nrow(Florida[,Florida$GORE > Florida$BUSH])
nrow(Florida[Florida$GORE > Florida$BUSH,])
Florida
Florida[Florida$GORE > Florida$BUSH,
]
Florida[Florida$GORE > Florida$BUSH]$Nader
Florida$Nader[Florida$GORE > Florida$BUSH]
Florida[Florida$GORE > Florida$BUSH]
Florida[Florida$GORE > Florida$BUSH,]
Florida[Florida$GORE > Florida$BUSH,]$Nader
q6 <- Florida[Florida$GORE > Florida$BUSH,]
View(q6)
View(q6)
sum(q6$NADER)
sum(Florida[Florida$GORE > Florida$BUSH,]$NADER)
q8 <- Florida
View(q8)
View(q8)
rownames(Florida$Total[Florida$Total == max(Florida$Total),])
rownames(Florida[Florida$Total = max(Florida$Total),])
rownames(Florida[Florida$Total == min(Florida$Total),])
rownames(Florida[Florida$Total == max(Florida$Total),])
nrow(Florida[,Florida$GORE > Florida$BUSH])
nrow(Florida[Florida$GORE > Florida$BUSH,])
view(q6)
View(q6)
point_scored <- c(24, 12, 14,1)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
point_allowed <- c(27, 24, 13, 17)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
point_scored <- c(24, 17, 24,20)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
point_allowed <- c(27, 24, 13, 17)
# Combine your two vectors into a dataframe called `games`
gmaes <- data.frame(points_scored, points_allowed)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
point_scored <- c(24, 17, 24,20)
# Combine your two vectors into a dataframe called `games`
gmaes <- data.frame(points_scored, points_allowed)
# Combine your two vectors into a dataframe called `games`
gmaes <- data.frame(point_scored, point_allowed)
View(gmaes)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$point_scored - games$point_allowed
# Combine your two vectors into a dataframe called `games`
gmaes <- data.frame(point_scored, point_allowed)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$point_scored - games$point_allowed
# Combine your two vectors into a dataframe called `games`
games <- data.frame(point_scored, point_allowed)
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponents <- c("bronocs", "Bears", "cowbays", "Cordinals")
# Assign your dataframe rownames of their opponents
rownames(games) <- opponents
View(gmaes)
View(games)
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponents <- c("bronocs", "Bears", "cowbays", "Cordinals")
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$point_scored - games$point_allowed
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponents <- c("bronocs", "Bears", "cowbays", "Cordinals")
# Assign your dataframe rownames of their opponents
rownames(games) <- opponents
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
setwd("C:/Users/black/github/book-exercises/chapter-10-exercises/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(gates_money)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
gates_money <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(gates_money)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- gates_money[gates_money$organization, ]
View(organization)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- gates_money$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
View(gates_money)
# What was the mean grant value?
mean_grant <- mean(gates_money$total_amount)
mean_grant
# What was the dollar amount of the largest grant?
largect_grant <- max(gates_money$total_amount)
smallest_grant
smallest_grant <- min(gates_money$total_amount)
smallest_grant
# Which organization received the largest grant?
largest_grant_org <- organization[gates_money$total_amount == largest_grant]
largest_grant <- max(gates_money$total_amount)
largest_grant
# Which organization received the largest grant?
largest_grant_org <- organization[gates_money$total_amount == largest_grant]
# Which organization received the smallest grant?
smallest_grant_org <- organizetion[gates_money$total_amount == smallest_grant]
# Which organization received the smallest grant?
smallest_grant_org <- organization[gates_money$total_amount == smallest_grant]
# How many grants were awarded in 2010?
length(gates_money$total_amount[grants$start_year == 2010])
# How many grants were awarded in 2010?
length(gates_money$total_amount[gates_money$start_year == 2010])
setwd("C:/Users/black/github/book-exercises/chapter-10-exercises/exercise-4")
> setwd("C:/Users/black/github/book-exercises/chapter-10-exercises/exercise-5")
setwd("C:/Users/black/github/book-exercises/chapter-10-exercises/exercise-5")
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringAsFactor = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringSAsFactorS = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == 2013, ]
# What was the most popular female name in 2013?
most_poular_2013 <- names_2013[names_2013$prop == max(names_2013$prop), "names"]
most_popular <- names_year[name_year$prop == max(names_year$prop), "names"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year){
names_year <- names[names$year == year_input, ]
most_popular <- names_year[name_year$prop == max(names_year$prop), "names"]
}
most_poular
most_popular
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year){
names_year <- names[names$year == year_input, ]
most_popular <- names_year[name_year$prop == max(names_year$prop), "names"]
most_popular
}
# What was the most popular female name in 1994?
most_popular_in_year(1994)
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year_input){
names_year <- names[names$year == year_input, ]
most_popular <- names_year[name_year$prop == max(names_year$prop), "names"]
most_popular
}
# What was the most popular female name in 1994?
most_popular_in_year(1994)
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year_input){
names_year <- names[names$year == year_input, ]
most_popular <- names_year[names_year$prop == max(names_year$prop), "names"]
most_popular
}
# What was the most popular female name in 1994?
most_popular_in_year(1994)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == 2013, ]
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == 2013, ]
View(names)
# What was the most popular female name in 2013?
most_poular_2013 <- names_2013[names_2013$prop == max(names_2013$prop), "names"]
max(names_2013$prop)
View(names_2013)
View(names_2013)
names_2013$prop
names_2013[names_2013$prop == max(names_2013$prop), "names"]
names_2013$prop == max(names_2013$prop)
max(names_2013$prop)
View(names_2013)
names_2013[names_2013$prop == max(names_2013$prop), "names"]
names_2013[names_2013$prop == max(names_2013$prop), ]
names_2013[names_2013$prop == max(names_2013$prop), "name"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year_input){
names_year <- names[names$year == year_input, ]
most_popular <- names_year[names_year$prop == max(names_year$prop), "name"]
most_popular
}
# What was the most popular female name in 1994?
most_popular_in_year(1994)
install.packages(dplyr)
install.packages("dplyr")
install.packages(nycflights13 )
install.packages("nycflights13")
install.packages("nycflights13")
library("nycflights13")
View(flights)
