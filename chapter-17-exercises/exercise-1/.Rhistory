theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(position = "dodge", stat = "identity",  colour = "black", fill = "grey") +
ylim(0,max(house_gender_info %>% select(`# of Representatives`))) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 2, position = "dodge", stat = "identity",  colour = "black", fill = "grey") +
ylim(0,max(house_gender_info %>% select(`# of Representatives`))) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, position = "dodge", stat = "identity",  colour = "black", fill = "grey") +
ylim(0,max(house_gender_info %>% select(`# of Representatives`))) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
ylim(0,max(house_gender_info %>% select(`# of Representatives`))) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
house_gender_info %>% select(`# of Representatives`) %>% min()
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
ylim(0,max(house_gender_info %>% select(`# of Representatives`))) +
scale_y_continuous(breaks = house_gender_info %>% select(`# of Representatives`) %>% max(),
house_gender_info %>% select(`# of Representatives`) %>% min())
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
ylim(0,max(house_gender_info %>% select(`# of Representatives`))) +
scale_y_continuous(breaks = house_gender_info %>% select(`# of Representatives`) %>% max(),
house_gender_info %>% select(`# of Representatives`) %>% min())
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
ylim(0,max(house_gender_info %>% select(`# of Representatives`))) +
scale_y_continuous(breaks = house_gender_info %>% select(`# of Representatives`) %>% max(),
house_gender_info %>% select(`# of Representatives`) %>% min()) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
ylim(0,max(house_gender_info %>% select(`# of Representatives`))) +
scale_y_continuous(breaks = house_gender_info %>% select(`# of Representatives`) %>% min()) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
represent_by_gender <- ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
ylim(0,gender_max) +
scale_y_continuous(breaks = c(1:gender_max)) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
gender_max <- house_gender_info %>%
select(`# of Representatives`) %>%
min()
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
ylim(0,gender_max) +
scale_y_continuous(breaks = c(1:gender_max)) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
represent_by_gender <- ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
ylim(0,gender_max) +
scale_y_continuous(breaks = c(1:gender_max)) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
ylim(0,gender_max) +
scale_y_continuous(breaks = c(1:gender_max)) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
gender_max <- house_gender_info %>%
select(`# of Representatives`) %>%
max()
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
ylim(0,gender_max) +
scale_y_continuous(breaks = c(1:gender_max)) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
ylim(0,gender_max) +
scale_y_continuous(breaks = c(1:gender_max:2)) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
1:2:10
c(1:10:2)
c(1:2:10)
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
geom_text(aes(label = count))
ylim(0,gender_max) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
geom_text(aes(label = count)) +
ylim(0,gender_max) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
geom_text(mapping = aes(label = count)) +
ylim(0,gender_max) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey", label = count) +
ylim(0,gender_max) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey", label = `# of Representatives`) +
ylim(0,gender_max) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey", label = y) +
ylim(0,gender_max) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
ylim(0,gender_max) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
kable(get_official_info())
library(httr)
library(dplyr)
library(jsonlite)
# get info of officials
get_official_info <- function() {
# get row data from google civic info API
base_url <- "https://www.googleapis.com/civicinfo/v2"
end_point <- "/representatives"
url_full <- paste0(base_url, end_point)
query_params <- list(key = "AIzaSyAmgNHn47ZOhm900izDqp_t6VA3qxrGRCQ",
address = "El Cerrito")
response <- GET(url_full, query = query_params)
response_content <- content(response, "text")
response_data <- fromJSON(response_content)
# get the info of officials: name, party, phones, emails, and photo
official_info <- response_data$officials %>%
replace(., is.na(.), "Not Avaliable") %>%
select(name, party, phones, urls, photoUrl, emails) %>%
mutate(photo = ifelse(photoUrl != "Not Avaliable", paste0("![", name, "]", "(", photoUrl ,"){ width=20% }"), photoUrl),
name = paste0("[", name, "]", "(", urls ,")")) %>%
select(name, party, phones, emails, photo)
official_info <- official_info %>% mutate(index = row_number() - 1)
# get the officials' titles
num_to_rep <- unlist(lapply(response_data$offices$officialIndices, length))
expended <- response_data$offices[rep(row.names(response_data$offices), num_to_rep),] %>%
mutate(index = row_number() - 1) %>%
rename(position = name)
# join the title and the other info together
official_info <- official_info %>%
left_join(expended %>% select(position, index)) %>%
select(name, position, phones, emails, photo)
official_info
}
get_official_info
get_official_info()
kable(get_official_info())
get_house_info <- function(){
end_point <- "members/house/CA/current.json"
url_full <- paste0(BASE_URL, end_point)
response_data <- (GET(
url_full,
add_headers(
"X-API-Key" = "QQuhdvzjOG5rpvoSLtCg1zi7zbsec75LwzS9kJ3I"
)) %>%
content("text") %>%
fromJSON())$result
response_data
}
get_house_info() %>%
group_by(gender) %>%
summarise(count = n()) %>%
rename("# of Representatives" = count)
BASE_URL <- "https://api.propublica.org/congress/v1/"
house_gender_info <- get_house_info() %>%
group_by(gender) %>%
summarise(count = n()) %>%
rename("# of Representatives" = count)
house_gender_info
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
geom_text(stat = "count", aes(label = `# of Representatives`, vjust = -1))
ylim(0,gender_max) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
house_gender_info <- get_house_info() %>%
group_by(gender) %>%
summarise(count = n()) %>%
rename("# of Representatives" = count)
gender_max <- house_gender_info %>%
select(`# of Representatives`) %>%
max()
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
geom_text(stat = "count", aes(label = `# of Representatives`, vjust = -1))
ylim(0,gender_max) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
geom_text(stat = "count", aes(label = `# of Representatives`, vjust = -1)) +
ylim(0,gender_max) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar() +
geom_text(stat = "count", aes(label = `# of Representatives`, vjust = -1))
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
geom_text(stat = "count", aes(label = gender, vjust = -1))
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
geom_text(stat = "count", aes(label = gender, vjust = -1))
ggplot(data = house_gender_info, aes(y = `# of Representatives`, x = gender)) +
geom_bar(width = 0.5, stat = "identity",  colour = "black", fill = "grey") +
geom_text(stat = "count", aes(label = gender)
)
View(house_gender_info)
represent_by_gender
house_gender_info <- get_house_info() %>%
group_by(gender) %>%
summarise(count = n()) %>%
rename("# of Representatives" = count)
setwd("C:/Users/black/github/book-exercises/chapter-17-exercises/exercise-1")
# Exercise 1: Creating a grouped bar chart of cancer rates in King County, WA
# (using plotly)
# Load necessary packages (`dplyr`, `ggplot2`, and `plotly`)
library(dplyr)
library(ggplot2)
library(plotly)
# Set your working directory using the RStudio menu:
# Session > Set Working Directory > To Source File Location
# Load the `"data/IHME_WASHINGTON_MORTALITY_RATES_1980_2014.csv` file
# into a variable `mortality_rates`
# Make sure strings are *not* read in as factors
mortality_rates <- read.csv("data/IHME_WASHINGTON_MORTALITY_RATES_1980_2014.csv", stringsAsFactors = FALSE)
# This is actually a very large and rich dataset, but we will only focus on
# a small subset of it. Create a new data frame `plot_data` by filtering the
# `mortality_rates` data to the following:
# - The `location_name` is "King County"
# - The `sex` is *not* "Both"
# - The `cause_name` is "Neoplasms"
# - The `year_id` is greater than 2004
# - Only keep the columns `sex`, `year_id`, and `mortality_rate`
plot_data <- mortality_rates %>%
filter(
location_name == "King County",
sex != "Both",
cause_name == "Neoplasms",
year_id > 2004
) %>%
select(sex,year_id,mortality_rate)
plot_data
mort_plot <- ggplot(plot_data) +
geom_col(mapping <- aes(x = year_id, y = mortality_rate, fill = sex), position = "dodge")
mort_plot
ggplot(plot_data) +
geom_col(mapping <- aes(x = year_id, y = mortality_rate), position = "dodge")
ggplot(house_gender_info) +
geom_bar(mapping = aes(y = `# of Representatives`, x = gender),
width = 0.5,
stat = "identity",
colour = "black",
fill = "grey")
house_gender_info <- get_house_info() %>%
group_by(gender) %>%
summarise(count = n()) %>%
rename("# of Representatives" = count)
get_house_info <- function(){
base_url <- "https://api.propublica.org/congress/v1/"
end_point <- "members/house/CA/current.json"
url_full <- paste0(base_url, end_point)
response_data <- (GET(
url_full,
add_headers(
"X-API-Key" = "QQuhdvzjOG5rpvoSLtCg1zi7zbsec75LwzS9kJ3I"
)) %>%
content("text") %>%
fromJSON())$result
response_data
}
house_gender_info <- get_house_info() %>%
group_by(gender) %>%
summarise(count = n()) %>%
rename("# of Representatives" = count)
gender_max <- house_gender_info %>%
select(`# of Representatives`) %>%
max()
ggplot(house_gender_info) +
geom_bar(mapping = aes(y = `# of Representatives`, x = gender),
width = 0.5,
stat = "identity",
colour = "black",
fill = "grey")
ggplot(house_gender_info) +
geom_bar(mapping = aes(y = `# of Representatives`, x = gender),
width = 0.5,
stat = "identity",
colour = "black",
fill = "grey")
ylim(0,gender_max) +
coord_flip()
ggplot(house_gender_info) +
geom_bar(mapping = aes(y = `# of Representatives`, x = gender),
width = 0.5,
stat = "identity",
colour = "black",
fill = "grey") +
ylim(0,gender_max) +
coord_flip()
ggplot(house_gender_info) +
geom_bar(mapping = aes(y = `# of Representatives`, x = gender),
width = 0.5,
stat = "identity",
colour = "black",
fill = "grey") +
ylim(0,gender_max) +
coord_flip() +
ggtitle("Representatives by Gender") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5),
axis.line.x = element_line(colour = "black"),
axis.ticks.y = element_blank(),
axis.title.y = element_blank())
